---
description: 
globs: *.test.ts
alwaysApply: false
---
# テスト規約

## 基本設定
テストフレームワーク: apps/frontend は vitest、それ以外のパッケージは deno test
※ディレクトリ構造の詳細は基本設計書（basic-design.mdc）の「10. プロジェクト構造」および本ファイルの「ディレクトリ構造」セクションを参照
- 全てのテストを実施する時は `pnpm test` を実行する
- 特定のユニットテストのみ実行:
  - Frontend: `pnpm --filter @vrchat-event-manager/frontend test tests/components/LoginButton.test.tsx`
  - その他: `deno test path/to/file.test.ts`
- E2Eテストのみ実行: `pnpm test:e2e` (ルートのpackage.jsonで定義)
- `apps/frontend` 以外では `vitest` や `jest` を使わない
- モックについては、Vitest (`vi.mock`) や Deno Test (`Deno.test` の `mock` オプションなど) の公式ドキュメントを参照
- テストカバレッジは80%以上を維持
- エッジケースのテストを必ず含める

## ディレクトリ構造
- **apps/frontend**:
  - ユニットテスト: `apps/frontend/tests/` ディレクトリ内に配置 (`*.test.ts`, `*.test.tsx`)
  ```
  apps/frontend/
  ├── src/
  │   └── components/
  │       └── LoginButton.tsx
  └── tests/
      └── components/
          └── LoginButton.test.tsx
  ```
- **その他のパッケージ (apps/backend, packages/*)**:
  - ユニットテスト: 実装ファイルと同じディレクトリに配置 (`*.test.ts`)
  ```
  packages/types/
  ├── index.ts
  └── index.test.ts
  ```
- **E2Eテスト**:
  - プロジェクトルートの `tests/e2e/` ディレクトリ内に配置 (`*.spec.ts`)
- **テストフィクスチャー**:
  - プロジェクトルートの `tests/fixtures/` ディレクトリ内に配置

## ファイル命名規則
- ユニットテスト: `*.test.ts` または `*.test.tsx` (frontend) / `*.test.ts` (その他)
- E2Eテスト: `*.spec.ts`
- テストヘルパー: `*.helper.ts`
- モックデータ: `*.mock.ts`

## TDDサイクル
1. Red: 失敗するテストを書く
   - 1つのテストケースのみ追加
   - テスト失敗の確認を必ず行う
   - テストの意図と期待する失敗を明確に説明
   ```bash
   # テストの実行で失敗を確認
   # Frontend例: pnpm --filter @vrchat-event-manager/frontend test tests/components/MyComponent.test.tsx
   # その他例: deno test path/to/myFunction.test.ts
   ```

2. Green: 最小限の実装でテストを通す
   - テストを通すための最小限の実装のみ行う
   - 複雑な実装は避け、単純な実装から始める
   - 型の定義は必要最小限から開始
   ```bash
   # テストが通ることを確認
   # Frontend例: pnpm --filter @vrchat-event-manager/frontend test tests/components/MyComponent.test.tsx
   # その他例: deno test path/to/myFunction.test.ts
   ```

3. Refactor: コードの品質を改善
   - 命名の改善
   - 重複の除去
   - 責務の分離
   - 型の厳密化
   - パフォーマンスの改善
   - 重複コードの共通化
   - エラーハンドリングの統一
   ```bash
   # リファクタリング後もテストが通ることを確認
   # Frontend例: pnpm --filter @vrchat-event-manager/frontend test tests/components/MyComponent.test.tsx
   # その他例: deno test path/to/myFunction.test.ts
   ```

## テストケース構造
```typescript
/**
 * テストケースの説明
 * 
 * 前提条件:
 * - 条件1
 * - 条件2
 * 
 * 期待する結果:
 * - 結果1
 * - 結果2
 */
describe("コンポーネント名 or 機能名", () => {
  describe("テストグループ", () => {
    test("テストケース名", () => {
      // テストコード
    });
  });
});
```

## テストの種類と配置
```typescript
type TestTypes = {
  unit: {
    location: "apps/frontend/tests/ (frontend), ./ (その他)";
    naming: "*.test.ts";
    scope: "単一の関数やコンポーネント";
  };
  e2e: {
    location: "tests/e2e/";
    naming: "*.spec.ts";
    scope: "複数の機能を跨ぐフロー";
  };
};
```

## テストカバレッジ要件
```typescript
// 基本的なテストカバレッジ
type CoverageRequirements = Readonly<{
  statements: number;     // 80%以上
  branches: number;      // 80%以上
  functions: number;     // 90%以上
  lines: number;        // 80%以上
}>;

// エッジケースのテスト必須項目
type EdgeCaseTests = Readonly<{
  nullValues: boolean;           // null値の処理
  undefinedValues: boolean;      // undefined値の処理
  emptyValues: boolean;          // 空文字列、空配列等
  boundaryValues: boolean;       // 境界値
  malformedInput: boolean;       // 不正な入力
  typeErrors: boolean;           // 型エラー
  asyncErrors: boolean;          // 非同期エラー
}>;
```

## エラーケースのテスト要件
```typescript
type ErrorTestRequirements = Readonly<{
  errorTypes: Readonly<{
    validation: boolean;    // バリデーションエラー
    network: boolean;       // ネットワークエラー
    timeout: boolean;       // タイムアウト
    auth: boolean;         // 認証エラー
    permission: boolean;   // 権限エラー
  }>;
  
  errorHandling: Readonly<{
    recovery: boolean;     // エラーからの回復
    retry: boolean;       // リトライ処理
    fallback: boolean;    // フォールバック処理
    cleanup: boolean;     // リソースのクリーンアップ
  }>;
  
  errorLogging: Readonly<{
    format: boolean;      // ログフォーマット
    level: boolean;      // ログレベル
    context: boolean;    // コンテキスト情報
  }>;
}>;
```

