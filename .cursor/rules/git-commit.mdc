---
description: 
globs: 
alwaysApply: true
---
# コミット管理ルール

## コミットの粒度

### 1. 機能単位でのコミット
- 1つの完結した機能の追加・修正
- 関連する実装とテストをまとめる
- 機能が大きい場合は、独立した単位で分割

### 2. ドキュメント・設定変更
- READMEの更新
- 設定ファイルの変更
- コメントの追加・修正

## コミットの制限

### 1. サイズ制限
- 1コミットあたりの変更行数: 300行以下を推奨
- 複数ファイルの変更: 関連するファイルをまとめて最大5ファイル程度
- これを超える場合は分割を検討

### 2. 変更の独立性
- 1つのコミットで1つの完結した機能を変更
- 無関係な機能の変更は別コミットに分割
- リファクタリングと機能追加は分離

## コミットメッセージ

### 1. プレフィックス
```bash
feat:     # 新機能の追加（実装とテストをセット）
fix:      # バグ修正（実装とテストをセット）
refactor: # リファクタリング（実装とテストをセット）
docs:     # ドキュメント更新
chore:    # その他の変更
```

### 2. メッセージ構造
```bash
# 基本形式（Cursor環境用）
<type>: <summary>

# 例（Cursor環境用 - 1行で簡潔に）
feat: ゾーン検索機能とバリデーション処理の実装
docs: 開発環境セットアップ手順の追加と更新

# 通常のGit環境での詳細な形式（Cursor環境外用）
<type>: <summary>

- 変更点1
- 変更点2

# 通常のGit環境での例（Cursor環境外用）
feat: ゾーン検索機能の実装とテストを追加

- 検索機能のコア実装を追加
- バリデーション処理を実装
- ユニットテストを追加
```

### 3. Cursor環境でのコミットメッセージルール
- 改行文字を含めない（`Command contains newline characters`エラー防止）
- 1行で簡潔に変更内容を表現する
- 長すぎる説明は避け、必要に応じてPRの説明に記載する
- 日本語の場合は句点「。」を省略する
- 関連する変更は「、」で区切って列挙する

### 4. コミットメッセージの品質基準
- 変更内容が具体的に理解できる
- 変更の範囲が明確
- 変更の理由や目的が分かる（必要な場合）
- 技術的なキーワードを適切に含める

## コミットタイミング

### 1. 機能実装の区切り
- 機能実装とテストの完了時
- 型定義とその利用の完了時
- ユーティリティ機能の完了時

### 2. その他
- ドキュメント更新時
- 設定変更時
- 大きな変更の途中経過

## コミットのベストプラクティス

### 1. 適切な粒度を保つ理由
- レビューの効率化
  - 関連する変更を一度に確認できる
  - 文脈が明確で理解しやすい
- 問題発生時の対応
  - 機能単位での影響範囲が明確
  - 必要に応じて機能単位でrevertが可能
- 履歴の可読性
  - 機能の追加・変更が追跡しやすい
  - コードの進化が理解しやすい

### 2. 理想的なコミット例
```bash
# 良い例：機能単位での分割
git commit -m "feat: ゾーン検索機能の実装とテストを追加"
git commit -m "refactor: ゾーン検索のバリデーション処理を改善"

# 悪い例：関連しない変更の混在
git commit -m "feat: ゾーン検索機能の追加、DNS設定の修正、テストの更新"
```

### 3. コミットの分割基準
- 機能的な単位
  - 1つの完結した機能
  - 関連する実装とテスト
  - 独立した改善や修正
- レビュー単位
  - レビュアーが一度に確認できる量
  - 文脈が完結している範囲
  - 依存関係が明確な範囲

### 4. 分割のタイミング
- 実装中
  - 機能の完了時
  - 大きな改善の完了時
  - 独立した修正の完了時
- レビュー前
  - コミットの整理（git rebase -i）
  - コミットの分割（git reset --soft）
  - コミットの統合（git squash）

### 5. コミットサイズの目安
- コード行数
  - 理想: 100-200行
  - 許容: 300行以下
  - 要分割: 300行超
- ファイル数
  - 理想: 2-3ファイル
  - 許容: 5ファイル以下
  - 要分割: 5ファイル超
- 変更の種類
  - 理想: 1つの完結した機能
  - 許容: 密接に関連する2-3の変更
  - 要分割: 独立した複数の機能 