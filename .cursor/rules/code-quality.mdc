---
description: 
globs: *.ts,*.tsx
alwaysApply: false
---
# コード品質規約

## コード品質の指標

### 1. 重複度
- 同一コードの重複: 5行以上の重複を禁止
- 類似コードの重複: 共通化を検討
- エラーハンドリングの重複: ユーティリティ関数化

### 2. 関数の複雑度
- 循環的複雑度: 10未満
- 認知的複雑度: 15未満
- ネストの深さ: 3レベル以下

### 3. 型の厳密さ
- any型の使用禁止
- unknown型からの適切な型絞り込み
- ユニオン型の活用
- 型ガード関数の作成

## リファクタリングの基準

### 1. コードの臭い
- 重複コード
- 長すぎる関数（30行以上）
- 複雑な条件分岐
- 不適切な命名
- 型の不整合

### 2. リファクタリングのタイミング
- テストが全て通過している時
- 新機能追加の前
- バグ修正の前
- コードレビューの指摘後

### 3. リファクタリング手順
- 現状の把握（テストの確認）
- 改善方針の決定
- 小さな単位での変更
- テストの実行
- 変更の確定

## モニタリングとデバッグ

### 1. ログレベルの定義
```typescript
const LogLevels = {
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  FATAL: 4,
} as const;
```

### 2. デバッグ情報
- エラーの発生場所
- エラーのコンテキスト
- スタックトレース
- 実行時の変数の状態

### 3. パフォーマンス指標
- 実行時間
- メモリ使用量
- API呼び出し回数
- エラー発生率

## 品質メトリクス
```typescript
type QualityMetrics = Readonly<{
  complexity: Readonly<{
    cyclomatic: number;      // 循環的複雑度（10未満）
    cognitive: number;       // 認知的複雑度（15未満）
    nesting: number;        // ネストの深さ（3以下）
  }>;
  
  maintainability: Readonly<{
    duplicateCode: number;   // コードの重複（5行以上の重複を禁止）
    functionSize: number;    // 関数の長さ（30行以下）
    fileSize: number;       // ファイルの長さ（300行以下）
  }>;
  
  testQuality: Readonly<{
    coverage: number;        // カバレッジ（基準は .cursor/rules/testing.mdc を参照）
    assertions: number;      // アサーション数（機能ごとに最低3つ）
    scenarios: number;      // テストシナリオ数（機能ごとに最低2つ）
  }>;
}>;
``` 