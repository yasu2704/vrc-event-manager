---
description: 
globs: *.test.ts
alwaysApply: false
---
# Bunのモジュールモックに関するルール

## 問題点
Bunのモジュールモックには以下の制限があります：

1. `mock.restore()`は`mock.module()`でモックしたモジュールを元の状態に戻せない
2. 複数のテストファイル間でモックが競合する可能性がある
3. モックの状態管理が困難
4. MockManagerクラスが`tests/helpers/MockManager.ts`に既に作成されている場合は積極的に利用する

## 推奨される解決策

### 1. MockManagerクラスを使用したアプローチ
```typescript
import { mock } from "bun:test";

type MockImplementation = () => Record<string, unknown>;

export class MockManager {
  private static instance: MockManager;
  private mocks: Map<string, MockImplementation> = new Map();

  static getInstance(): MockManager {
    if (!MockManager.instance) {
      MockManager.instance = new MockManager();
    }
    return MockManager.instance;
  }

  mockModule(modulePath: string, mockImplementation: MockImplementation) {
    this.mocks.set(modulePath, mockImplementation);
    mock.module(modulePath, mockImplementation);
  }

  restoreModule(modulePath: string, originalImplementation: MockImplementation) {
    if (this.mocks.has(modulePath)) {
      mock.module(modulePath, originalImplementation);
      this.mocks.delete(modulePath);
    }
  }
}
```

使用例：
```typescript
const mockManager = MockManager.getInstance();
const originalImplementation = () => ({ /* 元の実装 */ });
const mockImplementation = () => ({ /* モックの実装 */ });

beforeEach(() => {
  mockManager.mockModule("./target", mockImplementation);
});

afterEach(() => {
  mockManager.restoreModule("./target", originalImplementation);
});
```

### 2. Preloadを使用したアプローチ
```typescript
import { mock } from "bun:test";

const mockState = {
  isModuleMocked: false
};

export function mockModule() {
  if (!mockState.isModuleMocked) {
    mockState.isModuleMocked = true;
    mock.module("./target", () => ({
      // モックの実装
    }));
  }
}

export function restoreModule() {
  if (mockState.isModuleMocked) {
    mock.module("./target", () => ({
      // 元の実装
    }));
    mockState.isModuleMocked = false;
  }
}
```

## 使い分けのガイドライン

1. **MockManagerアプローチを使用する場合**：
   - 複雑なモック管理が必要な場合
   - 型安全性が重要な場合
   - モックの状態をより細かく制御したい場合
   - 複数のモジュールを同時にモックする必要がある場合

2. **Preloadアプローチを使用する場合**：
   - シンプルなモックで十分な場合
   - グローバルな状態管理が必要な場合
   - 設定を最小限に抑えたい場合
   - テストファイル間でモックの状態を共有したい場合

## 注意事項

1. テストファイルごとにモックの状態をリセットする
2. `beforeEach`と`afterEach`を適切に使用する
3. モックの実装は明示的に型付けする
4. 複数のテストファイルで同じモジュールをモックする場合は、テストの実行順序に注意する
5. 可能な限り、テストファイルを個別のプロセスで実行することを検討する（`bun test file1.test.ts file2.test.ts`）
