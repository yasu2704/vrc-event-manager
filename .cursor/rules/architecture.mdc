---
description: 
globs: 
alwaysApply: true
---
# アーキテクチャ設計ルール

## 1. フロントエンド実装ルール

### 1.1 レンダリング戦略
- Next.jsのApp Routerを使用したハイブリッドアプローチを採用
- ページごとに最適なレンダリング方式を選択

#### レンダリング方式の選択基準
| ページ種別 | レンダリング方式 | 理由 |
|------------|------------------|------|
| イベント一覧 | ISR | 定期的な更新、高速な初期表示 |
| イベント詳細 | SSR + CSR | SEO対応、動的更新 |
| カレンダー表示 | CSR | インタラクティブな操作 |
| ユーザープロフィール | SSR | セキュリティ、初期表示速度 |

### 1.2 ディレクトリ構造
app/
├── (auth)/ # 認証関連（SSR）
├── (dashboard)/ # ダッシュボード（ハイブリッド）
└── api/ # APIルート

### 1.3 パフォーマンス最適化
- Suspenseを使用した段階的なローディング
- 適切なキャッシュ制御
- コンポーネントの分割基準を明確化

## 2. バックエンド実装ルール

### 2.1 アーキテクチャ選択理由
- セキュリティ要件への対応
- ビジネスロジックの集中管理
- データの整合性確保
- 将来の拡張性確保

### 2.2 実装方針
- Hono on Cloudflare Workersを採用
- GraphQL APIの提供
- トランザクション管理の明確化
- バリデーション処理の一元化

## 3. データフェッチルール

### 3.1 フェッチ戦略
```typescript
// 基本的なフェッチパターン
// サーバーコンポーネントでの初期データフェッチ
async function getInitialData() {
  // キャッシュ制御を含める
  const revalidate = 60 // 1分
}

// クライアントコンポーネントでのリアルタイム更新
function useRealtimeData() {
  // SWRまたはReact Queryを使用
}
```

### 3.2 キャッシュ戦略
- ページ単位のキャッシュ制御
- APIレスポンスのキャッシュ
- 静的アセットのキャッシュ

## 4. エラーハンドリングルール

### 4.1 フロントエンド
- エラーバウンダリの適切な配置
- ユーザーフレンドリーなエラーメッセージ
- オフライン対応の考慮

### 4.2 バックエンド
- 構造化されたエラーレスポンス
- ログ記録の基準
- リトライ戦略

## 5. パフォーマンス基準

### 5.1 測定指標
- 初期表示時間: 3秒以内
- Time to Interactive: 4秒以内
- First Contentful Paint: 2秒以内

### 5.2 最適化要件
- 画像の最適化
- コード分割
- プリフェッチ戦略